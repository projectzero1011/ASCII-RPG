RPG Design Document v4


//--------------------------------------------


Class Design


Classes:


Player {row,col}
Enemy {row,col,weakness}
Hidden Boss


(Each have their own behavior and data)


-Stats (Up for debate)


//----------bool Enemy::in_vicinity()----------


After everyone finishes their turns,


Enemy checks for player in vicinity,


****If player in vicinity, don't move enemy and execute battlescene();, if not, move towards player


if (! in vicinity)
Execute enemy AI movement
(switch statement)
else
Battlescene();


or,


if (in vicinity)
Battlescene();
else
Execute enemy AI movement
(switch statement)


//-------------in_vicinity_player()-------------


row = get_pos().row;
col = get_pos().col;


enemy_up = overworld.look(--row,col);
enemy_left = over world.look(row,--col);
enemy_down = over world.look(++row,col);
enemy_right = over world.look(row,++col);


if(enemy_up == player_sprite)
       return true;


if(enemy_left == player_sprite)
      return true;


if(enemy_down == player_sprite)
       return true;


if(enemy_right == player_sprite)
       return true;


//------------------------------------------


There should be a function that returns ASCII frames, get_frame,


string get_frame(string frame);


Input the name of the sprite you want as a string literal into the function, and it will return the sprite you asked for; stored in a string variable declared in the function


Good idea because it centralizes all of the ASCII Sprites into one place instead of having 20 separate functions for each sprite,


and avoiding 20 pages of global string variable declarations storing the sprites before main()


Allows for looping for attack animations, putting get_frame(attack_frame_i) into vector attackframes, each index is one frame, and do this:


//
This function will be called in attack(), so create bool variable is_crit, if crit, cout crit screen and message


void attack_animation()
{


vector<string> attack_frames = {fr0, fr1...};


for(int i = 0; i < attack_frames.size(); i++)
{
system("cls");
if(crit) {
       PRINT health bar
       cout << crit_screen;
       system("cls");
}
print health bar
cout << attack_frames[i];
nextframe();
}


}
//


Can't put frames into vector if the get frame function is a void function that does cout, you can't loop in that case


// Blank Player Option Box when animations are playing, with Player/Enemy turn at top,


==========Player Turn==========


=============================


//-------------Major Decisions---------------


Creating our map


(Look into Satisfiability and the n queens problem; or variants of n queens)
-Random entity placement:


-Random special item and obstacle placement


or,


(Do this one)
***-Fixed entity placement:


-Make maps for each stage,
-Random special item and obstacle placement


// Create maps with fixed entity placements, and test out varied special item and obstacle placements that could crop up if they were random


//------------------------------------------


Stats for Entities


Proposed Stats:


Given:
-Health


Most likely:
-Attack (1 DMG)
-Defend (True or False)
-80 % Accuracy (Hit most of the time)


// Grand/Round cast will break defense of enemy if you hit weakness (maybe higher Lv enemies so this too); iff enemy can defend


// Stats will depend on RNG Generator, better stats will correlate with better RNG


Debate:


    Have to be careful because hitting enemy 7 times in a row with say 80% or 85% accuracy might be really rare; adjust/ test accuracy based on this point
    Look into RNG Systems in games, and player psychology (what is considered good stats for a player? Our notion of "good accuracy is probably very different from what actual good accuracy is, {90% might be terrible, etc})

OLD:

Level 1 Enemy
    Health: 3 Hearts
   
Level 2 Enemy
    Health: 5 Hearts
   
Level 3 Enemy
    Health: 7 Hearts
   
Final Boss
    Health: 9 Hearts


*What we'll probably work with:
+SPELL GAINED


//------------------------------------------


Story


Player:
Exiled/Non-Exiled Lord, Prince, or Royalty in the vein of Addam, Marth, Jonathan Joestar, etc


or,


Rogue Mercenary


Both have a special trinket or part of a special trinket that is sought after in some way or another


Level 1 Enemy:
2 HP
Basic rugged thief attempting to steal special trinket in an attempt to get rich


Level 2 Enemy:
3 HP
Knight/Paladin, sent from the royal castle of the kingdom that exiled the player or from the rival kingdom of the player to retrieve the special trinket


Level 3 Enemy:
5 HP
Maybe same as level 2 Enemy, and level 2 Enemy is just some mage/wizard that detected the special trinket and has an eccentric personality


or,


Lord or higher level Knight also looking to retrieve the special trinket, or just a dragon or beast of some kind (if ASCII Art allows)


Final Level Enemy:
7 HP
(Hidden Boss/Final Boss)


Final Boss:
7 HP
Reach the castle of the kingdom that exiled the player to face the rival lord in battle in the throne room


//
Hidden Boss:
9 HP
Self-insert/meme, etc


Both of these enemies will have special behavior, animations, conditions, stats, moves, etc, and will require all of the things you have gathered on your journey to be able to beat them
//


//
To implement dialogue, do this:


vector<string> dialogue(2);


for(int i = 0; i < dialogue.size(); i++) {
       system("cls");
       PRINT frame;
       cout << dialogue[i];
       prompt_next();
}
//


//------------------Ideas--------------------


Accuracy increases with each enemy stage
(Maybe)


No healing in between stages (Give a base amount of healing items, also do this to penalize not getting the special item in time, enemy will go first if no special item, you will go first if you have special item)


If you get special item next to enemy, you will still get it, but only after the battle, and the enemy will go first


-3 DMG is max DMG that will be allowed for any one spell or move


Mix up weaknesses of enemies


(Maybe)
Final Attack after mastering grand round system, does -3 (For Final Boss)


//
Turn Economy
Player/Enemy can increase their number of turns
Doing super effective spells can skip player/enemy turns like SMT Switch, and when perform spell, changes player/enemy weakness, so there is chain of correct spells you must perform
//


//
If you beat the game mastering the grand round system (little DMG taken, all special items), or meet some special condition, unlock hidden boss or endless mode


Roguelike system or mode where you constantly battle enemies round after round, and constantly gain new special items, stats, and moves, and see how far you get, while also optimizing your turn based battle strategies


Pick what skills/moves you want for more replayability


Low HP = Crit Rate UP and/or Crit UP
Multiple Turn UP
Base Stats UP
//


//
Major question:
What does grand do when you hit an enemy with its weaknesses?


(Ideally it does something in order to have a consistent system)


-2 DMG && Status Effect
//


//
Fire Crystal/Materia
Ice Crystal/Materia
Lightning Crystal/Materia
//


//------------------------------------------


Deal with frames instead of battle sprites, have a class that will contain all of the necessary frames needed along with member functions that play animations based on the frames contained within the class


Use enumerations instead of ch for declaring multiple symbolic frame constants (ie, player_attack_0
player_attack_1
etc...


class Frame_manager {
public:
       get_frame(char frame);
       player_attack_animation();
       enemy_attack_animation();
       player_fire_spell_animation();
       player_ice_spell_animation();
       player_lightning_spell_animation();
};


Make frame for title screen


//------------------------------------------


0) Work on ASCII graphics more


1) Simplify void Player::move()
Done ✅


2) Introduce class Item/Obstacle
Done ✅
(Most likely will undo this)


3) Rework void Player::move() implementing collision logic for class Player (collision with trees, getting items)
Done ✅


4) Introduce class Enemy as defined in notes; with move() implementing enemy AI
• Player-enemy vicinity logic in main game loop
• Review P:PP Using C++, and C++ in general before continuing onto this step
• Read Chapter 9 of P:PP Using C++ before continuing onto this step
• Add player-enemy vicinity logic (activate battlescene() if near enemy) by adding to bool Enemy::in_vicinity_player()


5) Implement and test battlescene() for each enemy and their respective stage


6) Create Frame_manager


7) Implement Frame_manager into existing battlescene()


//------------------------------------------


Player Specifications


//
HP


3 HP
//


//
MP


3 MP
//


//
Attack


-1 DMG
+1 MP
//


//
Accuracy


-Attacks have 80% Accuracy
-Spells have 100% Accuracy


(Maybe make it so you always have 100% accuracy, but the enemy has 80% accuracy, but I doubt that this will pass)
//


//
Attack Crit Rate


10% Chance of -2 DMG


(Maybe raise base crit rate?)
(Maybe Low HP: (Crit Rate UP) V (Crit UP))
(If Crit UP, -3 DMG)
//


//
Cast Grand (Spell)


//
Old
80% Chance of -2 DMG or -3 DMG if MP < 3
Slightly higher than regular attack Crit rate


Combined probability that you hit spell and get grand cast bonus (-2 DMG) = 65%
//


//
New
-2 DMG; Requires 2 MP
//


>Optional Bonus when MP == 3
       -Lv 3 (3MP) grand spell cast; DMG UP
       -100% grand cast bonus


>Optional Bonus when enemy is stunned with weaknesses from round spell cast:
       -More DMG
       -Status Effect


>Optional Bonus when Health low:
       -Skip Enemy Turn or More DMG, or both
       -Optional -> "Berserker" sword attack
//


//
Cast Round (Spell)


100% Chance of skipping enemy turn iff you figure out the enemy weakness


Enemy becomes spell element and will change weakness according to what element is good against enemy's current elemental status to cycle elemental weaknesses


Fire -> Ice -> Lightning -> Fire -> ...


>Optional Bonus when enemy defends
       -Maybe casting round breaks enemy defense if enemy defends like the player; iff you hit round weakness


>Optional Bonus when enemy stunned by round weakness
       -Maybe Crit Rate UP
//


//
Defend


70% Chance of success
If success, +1 MP, move again
Fail if didn't pass 70% or enemy misses


1) Defend
2) Enemy Attacks
IF hit && roll >70%
       // +1 MP, move again
ELSE
       // defend_fail, continue as normal
//


//
Miscellaneous


You carry your MP into the next stage


[Need strategy to finish with full MP for the next stage; also makes it so that attack is not useless too; saves MP for next stage]


Spells do consistent DMG


[Nice to have consistency with spell DMG, kind of confusing to have spells do a variable amount of DMG maybe]


Inclusion of MP Bar


[Allows recharge MP by attacking or defending to prevent a race to zero hp and allowing multiple use of spells while limiting use of spells]


[If unlimited spells, can just cast round and prevent enemy movement entirely; game is over once you figure out weaknesses, and that's boring]


2 MP Grand cast Requirement


[Encourages players to cast round in the first stage to figure out weakness system in the first stage]


[Encourages players to experiment with round more b/c Round is only 1 MP vs Grand is 2MP]


Player starts at 0 MP


[Forces player to cast round at stage 1]


[Allows advanced players to use the first stage as a set up for the next stages]


[More satisfying to build your MP]


[More satisfying to do Max MP Attacks]
//


Enemy Specifications


//


//


//
Miscellaneous


Chance enemy can miss


[Accuracy is close to 100%, same as player]
//


//------------------------------------------


Test with 10-sided dice rolls and writing health values on paper (Tabletop almost)
---> Make prototype quickly


Test Results:


-Quickly becomes a race to 0 once your spells run out (Player attacks...Enemy attacks...Player attacks...
(Maybe occasional miss, crit, or use_potion())


Possible solutions:


1) Biggest annoyance is the enemy attacking right after you heal, though it might make it so that 3 potions is too much, could reduce it to 2 if you implement this;
       -->Have potion use not waste a turn, that is, using a potion "skips" a turn


2) Balance Grand/Round such that knowing the weaknesses (utilizing round somehow) is wayyyy better than not


3) Mastering weaknesses/round will yield more rewards than just using grand all the time, so might have to go back to basics and say grand is -2 DMG, round (mastered) is -4 DMG, and grand requires 2+ MP, or just 3 MP


4) Or, mastering round will grant big bonus when at 3 MP (like grand), perhaps even better stuff


-Burn status effect (DoT)
-Freeze status effect (Skip 2 turns)
-Lightning status effect (Buff)


At the same time, I want to keep things relatively simple


-Lv 3 grand cast at 3MP
or,
-Round cast then Lv 2 grand cast for status effect
or,
-2 DMG grand cast at all times, and give status effect if you hit weakness
or,
Hitting grand weakness is -3 DMG, but also, having 1 HP == Crit UP (80%)


But also might force players to experiment with round, so, who knows


**Might take crit up bonus and 3rd option
If you take 3rd option, you can do round then grand for a double whammy


// ---------------Testing---------------------


***TEST
Game loop discovered:
Defend -> Round -> Defend -> Round ... etc


Results so far:
-Only works if defend is successful each time
-Didn't even have to use potions...


***TEST
Grand cast with 2mp requirement


Results so far:
-Not bad, just barebones, we'll work on it


***TEST
Player using potions doesn't waste a turn


Results so far:


***TEST
Enemy use potion


Results so far:


***TEST
Enemy (Lv 1) 3 HP
Obtain Ice crystal, Weak to Ice


Results so far:


***TEST
Enemy (Lv 2) 5 HP
Obtain Lightning crystal, Weak to Ice


Results so far:


***TEST
Enemy (Lv 3) 7 HP
Obtain Fire crystal, Weak to Lightning


Results so far:


***TEST
Enemy (Final) 9 HP
Weak to Fire


Results so far:


***TEST
Full game with stages with respective enemies in each stage


Results so far:




//------------------------------------------